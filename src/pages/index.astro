---
import fetchApi from "../core/api";
import type {UserRating} from "../interfaces/table";

import LogginLayout from "../layouts/LogginLayout.astro";
import {getFutureMatch, getLiveMatch} from "../lib/match";
import {formatDate, filterValidGames, extractTime} from "../lib/function";
import {getTipByUserAndMatchIds} from "../lib/tip";
import Flag from '../components/Flag.astro';
import Input from '../components/Input.astro';
import Button from '../components/Button.astro';
import ShortTable from '../components/ShortTable.astro';
import "./../styles/index.css";
const user = Astro.locals.user;
if (!user) {
    return Astro.redirect("/login");
}

const matches = await getFutureMatch();

const validGames = matches.filter(filterValidGames);

validGames.sort((a, b) => new Date(a.utcDate) - new Date(b.utcDate));

const gamesIds = validGames.map(game => game.id);

const tips = await getTipByUserAndMatchIds(user.id, gamesIds);
const tipsMap = tips.reduce((acc, match) => {
    acc[match.matchId] = match;
    return acc;
}, {});

const groupedGames = validGames.reduce((acc, game) => {
    const date = formatDate(game.utcDate);
    const time = extractTime(game.utcDate);

    if (!acc[date]) {
        acc[date] = [];
    }

    gamesIds.push(game.id);

    let match = {
        id: game.id,
        homeTeam: game.homeTeam.name,
        homeTla: game.homeTeam.tla,
        awayTeam: game.awayTeam.name,
        awayTla: game.awayTeam.tla,
        time: time,
        tipHome: null,
        tipAway: null
    };

    if (tipsMap[game.id]) {

        match.tipHome = tipsMap[game.id].scoreHome;
        match.tipAway = tipsMap[game.id].scoreAway;
    }

    acc[date].push(match);

    return acc;
}, {});

let liveMatchesInfo = [];
const liveMatches = await getLiveMatch();
if(liveMatches.length > 0) {
    const liveMatchIds = liveMatches.map(match => match.id);

    const userData = await fetchApi<UserRating>('user/' + Astro.locals.user.id, 'data');

    liveMatchesInfo = userData.tips.filter(tip => liveMatchIds.includes(Number(tip.match_id)));
    liveMatchesInfo = liveMatchesInfo.map(matchInfo => {
        const utcDate = new Date(matchInfo.date * 1000);
        return {...matchInfo, utcDate};
    });

}
---
<LogginLayout title="Dashboard">

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 pt-5 px-5">
        <div>

            <p class="text-zinc-400 pb-5">
                <span class="text-white font-extrabold">Update 17.06.2024:</span> <br>Man kann jetzt die Live-Ergebnisse sehen. Außerdem kann man auf das Match klicken (live oder bei den Usern), um eine Ansicht zu öffnen, in der man das Match und die Tipps der anderen sehen kann.
            </p>

            <h1>Tabelle</h1>
            <ShortTable />
        </div>

        <div>
            <h1>Spielplan</h1>

            {liveMatchesInfo.length > 0 && (
                    <div class="info-grid mt-8 pl-4 text-zinc-400 mb-4">
                        <div class="info-date ">{formatDate(liveMatchesInfo[0].utcDate)}</div>
                        <div class="info-score">Ergebnis</div>
                        <div class="info-tip">Dein Tipp</div>
                    </div>
            )}

            {liveMatchesInfo.map((game, index) => (
                <a href={`/match/${game.match_id}`}>
                    <div class="match-grid bg-neutral-700 mt-4">
                        <div class="match-team-1 pt-5">
                            <Flag iso={game.team1.tla} /> {game.team1.name}
                        </div>
                        <div class="match-team-2 pb-5">
                            <Flag iso={game.team2.tla} /> {game.team2.name}
                        </div>
                        <div class="match-score-team-1 pt-5">{game.score_home}</div>
                        <div class="match-score-team-2 pb-5">{game.score_away}</div>
                        <div class="match-tip py-5">
                            <div class="match-tip-grid info-tip-score">
                                <div class="match-tip-grid-score1 score1 ">{game.tip_home}</div>
                                <div class="match-tip-grid-score-last-box text-center">
                                    <div class={`seven-segmnet text-xl mx-auto
                                        ${game.score === 4 ? 'text-green-500' :
                                        game.score === 2 ? 'text-yellow-300' :
                                        game.score === 0 ? 'text-red-500' :
                                    ''}
                                `}>

                                        {game.score > 0 ? '+' : ''} {game.score} {game.score === 1 ? 'Punkt' : 'Punkte'}

                                    </div>
                                    <div class="text-white bg-red-500 p-1 mx-auto w-12 rounded-lg">Live</div>
                                </div>
                                <div class="match-tip-grid-score2 score2">{game.tip_away}</div>
                            </div>
                        </div>
                    </div>
                </a>
            ))}

            <div>
                {Object.entries(groupedGames).map(([date, games]) => (
                        <>
                            <div class="info-grid mt-8 pl-4 text-zinc-400 mb-4">
                                <div class="info-date ">{date}</div>
                                <div class="info-tip">Dein Tipp</div>
                            </div>
                                {games.map(game => (
                                        <div class="error pl-4 pb-2 text-red-500 hidden" id=`form-error-${game.id}`></div>
                                        <div class="match-grid bg-neutral-800 mb-4">
                                            <div class="match-team-1 pt-2">
                                                <Flag iso={game.homeTla} /> {game.homeTeam}
                                            </div>
                                            <div class="match-team-2 pb-2">
                                                <Flag iso={game.awayTla} /> {game.awayTeam}
                                            </div>
                                            <div class="match-tip">
                                                <form class={`match-tip-grid form-tip-score ${game.tipHome !== null && game.tipAway !== null ? 'hidden' : ''}`} method="POST" data-form-id={game.id} action={`/api/tip/${game.id}`}>
                                                    <div class="match-tip-grid-score1 pr-4 pt-2">
                                                        <Input type="number" name="tip1" value={game.tipHome} background="bg-neutral-900" extraAttributes={{ min: 0, max: 20 }}/>
                                                    </div>
                                                    <div class="match-tip-grid-score2 pr-4 pb-2">
                                                        <Input type="number" name="tip2" value={game.tipAway} background="bg-neutral-900" extraAttributes={{ min: 0, max: 20 }}/>
                                                    </div>
                                                    <div class="match-tip-grid-score-last-box">
                                                        <div class="ml-6 mr-6 xl:mr-0">
                                                            <Button className="tipSend" name="save" />
                                                        </div>
                                                    </div>
                                                </form>
                                                <div class={`match-tip-grid info-tip-score cursor-pointer ${game.tipHome !== null && game.tipAway !== null ? '' : 'hidden'}`}>
                                                    <div class="match-tip-grid-score1 score1">{game.tipHome}</div>
                                                    <div class="match-tip-grid-score-last-box">
                                                        <div class="seven-segmnet text-2xl">{game.time}</div>
                                                    </div>
                                                    <div class="match-tip-grid-score2 score2">{game.tipAway}</div>
                                                </div>
                                                <div class="match-tip-grid mt-10 ml-8 hidden loading-spinner" >
                                                    <div class="loading"/>
                                                </div>
                                            </div>
                                        </div>
                                ))}

                        </>
                ))}
            </div>
        </div>
    </div>

</LogginLayout>

<script>

    function removeClass(element, className) {
        if (element.classList.contains(className)){
            element.classList.remove(className);
        }
    }

    function addClass(element, className) {
        if (!element.classList.contains(className)){
            element.classList.add(className);
        }
    }

    document.addEventListener("DOMContentLoaded", function () {

        document.querySelectorAll('.info-tip-score').forEach(infoDiv => {
            infoDiv.addEventListener('click', function() {
                const parentDiv = this.closest('.match-tip');

                this.classList.add('hidden');

                const formDiv = parentDiv.querySelector('.form-tip-score');
                if (formDiv.classList.contains('hidden')) {
                    formDiv.classList.remove('hidden');
                }
            });
        });

        document.querySelectorAll('.match-tip-grid').forEach(form => {

            form.addEventListener("submit", async (e) => {
                e.preventDefault();

                const formElement = e.target as HTMLFormElement;
                const parentDiv = formElement.closest('.match-tip');

                const gameID = formElement.getAttribute('data-form-id');
                const errorDiv = document.getElementById(`form-error-${gameID}`);
                addClass(errorDiv, 'hidden');

                formElement.classList.add('hidden');
                const loadingDiv = parentDiv.querySelector('.loading-spinner');
                loadingDiv.classList.remove('hidden');

                const response = await fetch(
                    formElement.action,
                    {
                        method: formElement.method,
                        body: new FormData(formElement)
                    } as RequestInit
                );

                loadingDiv.classList.add('hidden');
                formElement.classList.remove('hidden');

                const json = await response.json();
                if(response.status === 200 && json.success) {

                    formElement.classList.add('hidden');


                    const score1Div = parentDiv.querySelector('.score1');
                    const score2Div = parentDiv.querySelector('.score2');

                    score1Div.textContent = json.tip.scoreHome;
                    score2Div.textContent = json.tip.scoreAway;

                    const hiddenDiv = parentDiv.querySelector('.info-tip-score.hidden');
                    if (hiddenDiv) {
                        hiddenDiv.classList.remove('hidden');
                    }
                    return;

                }

                removeClass(errorDiv, 'hidden');
                let errorMessage = 'Fehler beim Speichern des Tipps';
                if(json.error) {
                    errorMessage = json.error;
                }
                errorDiv.textContent = errorMessage;
            });
        });
    });
</script>
